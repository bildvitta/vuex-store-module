{"version":3,"file":"vuexStoreModule.min.js","sources":["../src/vuexStoreModule.js"],"sourcesContent":["export default class {\n  constructor (options = {}) {\n    if (!options.apiService) {\n      throw new Error('Please provide an API service.')\n    }\n\n    // set this.api config\n    this.api = options.apiService\n    this.idKey = options.idKey\n  }\n\n  createStoreModule (resource, options = {}) {\n    if (!resource) {\n      throw new Error('Resource name must be specified.')\n    }\n\n    function call (name, ...parameters) {\n      if (typeof options[name] === 'function') {\n        options[name](parameters)\n      }\n    }\n\n    function run (fn, ...parameters) {\n      return typeof fn === 'function' ? fn(...parameters) : fn\n    }\n\n    const idKey = options.idKey || this.idKey || 'id'\n    const perPage = options.perPage || 12\n\n    const methods = options.methods || [\n      'CREATE',\n      'DESTROY',\n      'FETCH_FILTERS',\n      'FETCH_FORM',\n      'FETCH_LIST',\n      'FETCH_SINGLE',\n      'REPLACE',\n      'UPDATE'\n    ]\n\n    const hasCreate = methods.includes('CREATE')\n    const hasDestroy = methods.includes('DESTROY')\n    const hasFetchFilters = methods.includes('FETCH_FILTERS')\n    const hasFetchForm = methods.includes('FETCH_FORM')\n    const hasFetchList = methods.includes('FETCH_LIST')\n    const hasFetchSingle = methods.includes('FETCH_SINGLE')\n    const hasReplace = methods.includes('REPLACE')\n    const hasUpdate = methods.includes('UPDATE')\n\n    // States\n    const stateData = {\n      filters: {},\n      list: [],\n      totalPages: 0\n    }\n\n    if (hasCreate) {\n      stateData.isFetchingSingle = false\n      stateData.fetchSingleError = null\n    }\n\n    if (hasDestroy) {\n      stateData.isDestroying = false\n      stateData.destroyError = null\n    }\n\n    if (hasFetchFilters) {\n      stateData.isFetchingFilters = false\n      stateData.fetchFiltersError = null\n    }\n\n    if (hasFetchForm) {\n      stateData.isFetchingForm = false\n      stateData.fetchFormError = null\n    }\n\n    if (hasFetchList) {\n      stateData.isFetchingList = false\n      stateData.fetchListError = null\n    }\n\n    if (hasFetchSingle) {\n      stateData.isFetchingSingle = false\n      stateData.fetchSingleError = null\n    }\n\n    if (hasReplace) {\n      stateData.isReplacing = false\n      stateData.replaceError = null\n    }\n\n    if (hasUpdate) {\n      stateData.isUpdating = false\n      stateData.updateError = null\n    }\n\n    Object.assign(stateData, options.state || {})\n\n    // Getters\n    const getters = {\n      list: state => state.list,\n\n      filters: state => state.filters,\n\n      totalPages: state => state.totalPages,\n  \n      byId: state => id => state.list.find(item => item[idKey] === id),\n\n      isLoading: state => (\n        state.isCreating ||\n        state.isDestroying ||\n        state.isFetchingFilters ||\n        state.isFetchingList ||\n        state.isFetchingSingle ||\n        state.isReplacing ||\n        state.isUpdating\n      ),\n\n      hasErrors: state => (\n        state.createError !== null ||\n        state.destroyError !== null ||\n        state.fetchFormError !== null ||\n        state.fetchFiltersError !== null ||\n        state.fetchListError !== null ||\n        state.fetchSingleError !== null ||\n        state.replaceError !== null ||\n        state.updateError !== null\n      )\n    }\n\n    Object.assign(getters, options.getters || {})\n\n    // Mutations\n    const mutations = {}\n\n    if (hasCreate) {\n      mutations.createStart = state => {\n        state.isCreating = true\n        call('onCreateStart', state)\n      }\n\n      mutations.createSuccess = (state, response) => {\n        const { data } = response\n\n        if (data) {\n          state.list.push(data)\n        }\n\n        state.createError = null\n        state.isCreating = false\n        call('onCreateSuccess', state, response)\n      }\n\n      mutations.createError = (state, error) => {\n        state.createError = error\n        state.isCreating = false\n        call('onCreateError', state, error)\n      }\n    }\n\n    if (hasDestroy) {\n      mutations.destroyStart = state => {\n        state.isDestroying = true\n        call('onDestroyStart', state)\n      }\n  \n      mutations.destroySuccess = (state, id) => {\n        const index = state.list.findIndex(item => item[idKey] === id)\n\n        if (~index) {\n          state.list.splice(index, 1)\n        }\n\n        state.destroyError = null\n        state.isDestroying = false\n        call('onDestroySuccess', state, id)\n      }\n\n      mutations.destroyError = (state, error) => {\n        state.destroyError = error\n        state.isDestroying = false\n        call('onDestroyError', state, error)\n      }\n    }\n\n    if (hasFetchFilters) {\n      mutations.fetchFiltersStart = state => {\n        state.isFetchingFilters = true\n        call('onFetchFiltersStart', state)\n      }\n\n      mutations.fetchFiltersSuccess = (state, response) => {\n        const { fields } = response.data\n        state.filters = fields\n\n        state.fetchFiltersError = null\n        state.isFetchingFilters = false\n        call('onfetchFiltersSuccess', state, response)\n      }\n\n      mutations.fetchFiltersError = (state, error) => {\n        state.fetchFiltersError = error\n        state.isFetchingFilters = false\n        call('onFetchFiltersError', state, error)\n      }\n    }\n\n    if (hasFetchForm) {\n      mutations.fetchFormStart = state => {\n        state.isFetchingForm = true\n        call('onFetchFormStart', state)\n      }\n  \n      mutations.fetchFormSuccess = (state, response) => {\n        state.fetchFormError = null\n        state.isFetchingForm = false\n        call('onfetchFormSuccess', state, response)\n      }\n\n      mutations.fetchFormError = (state, error) => {\n        state.fetchFormError = error\n        state.isFetchingForm = false\n        call('onFetchFormError', state, error)\n      }\n    }\n\n    if (hasFetchList) {\n      mutations.fetchListStart = state => {\n        state.isFetchingList = true\n        call('onFetchListStart', state)\n      }\n\n      mutations.fetchListSuccess = (state, payload = {}) => {\n        const { response, increment, page } = payload\n        const { results, count } = response.data\n\n        increment && page > 1\n          ? state.list.push(...results)\n          : state.list = results || []\n  \n        state.totalPages = Math.ceil(count / perPage)\n        state.fetchListError = null\n        state.isFetchingList = false\n        call('onfetchListSuccess', state, response)\n      }\n\n      mutations.fetchListError = (state, payload = {}) => {\n        const { error, increment } = payload\n\n        if (!increment) {\n          state.list = []\n        }\n\n        state.fetchListError = error\n        state.isFetchingList = false\n        call('onFetchListError', state, error)\n      }\n    }\n\n    if (hasFetchSingle) {\n      mutations.fetchSingleStart = state => {\n        state.isFetchingSingle = true\n        call('onFetchSingleStart', state)\n      }\n\n      mutations.fetchSingleSuccess = (state, response) => {\n        const { result } = response.data\n\n        if (result) {\n          const index = state.list.findIndex(\n            item => item[idKey] === result[idKey]\n          )\n\n          if (~index) {\n            state.list.splice(index, 1, result)\n            return\n          }\n\n          state.list.push(result)\n        }\n\n        state.fetchSingleError = null\n        state.isFetchingSingle = false\n        call('onFetchSingleSuccess', state, response)\n      }\n\n      mutations.fetchSingleError = (state, error) => {\n        state.fetchSingleError = error\n        state.isFetchingSingle = false\n        call('onFetchSingleError', state, error)\n      }\n    }\n\n    if (hasReplace) {\n      mutations.replaceStart = state => {\n        state.isReplacing = true\n        call('onReplaceStart', state)\n      }\n\n      mutations.replaceSuccess = (state, response) => {\n        const { result } = response.data\n\n        const index = state.list.findIndex(\n          item => item[idKey] === result[idKey]\n        )\n\n        if (~index) {\n          state.list.splice(index, 1, result)\n        }\n\n        state.replaceError = null\n        state.isReplacing = false\n        call('onReplaceSuccess', state, response)\n      }\n\n      mutations.replaceError = (state, error) => {\n        state.replaceError = error\n        state.isReplacing = false\n        call('onReplaceError', state, error)\n      }\n    }\n\n    if (hasUpdate) {\n      mutations.updateStart = state => {\n        state.isUpdating = true\n        call('onUpdateStart', state)\n      }\n\n      mutations.updateSuccess = (state, response) => {\n        const { result } = response.data\n\n        for (const index in state.list) {\n          const item = state.list[index]\n\n          if (item[idKey] === result[idKey]) {\n            state.list.splice(index, 1, { ...item, ...result })\n            break\n          }\n        }\n\n        state.updateError = null\n        state.isUpdating = false\n        call('onUpdateSuccess', state, response)\n      }\n  \n      mutations.updateError = (state, error) => {\n        state.updateError = error\n        state.isUpdating = false\n        call('onUpdateError', state, error)\n      }\n    }\n  \n    Object.assign(mutations, options.mutations || {})\n\n    // Actions\n    const actions = {}\n\n    if (hasCreate) {\n      actions.create = ({ commit }, { payload, url } = {}) => {\n        commit('createStart')\n        url = url || options.createURL || `/${resource}/`\n  \n        return this.api.post(url, payload).then(response => {\n          commit('createSuccess', response)\n          return response\n        }).catch(error => {\n          commit('createError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasDestroy) {\n      actions.destroy = ({ commit }, { id, params, url } = {}) => {\n        commit('destroyStart')\n        url = run(url || options.destroyURL, { id }) || `/${resource}/${id}/`\n\n        return this.api.delete(url, { params }).then(response => {\n          commit('destroySuccess', id)\n          return response\n        }).catch(error => {\n          commit('destroyError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchFilters) {\n      actions.fetchFilters = ({ commit }, { params, url } = {}) => {\n        commit('fetchFiltersStart')\n        url = url || options.fetchFiltersURL || `/${resource}/filters/`\n  \n        return this.api.get(url, { params }).then(response => {\n          commit('fetchFiltersSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFiltersError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchForm) {\n      actions.fetchForm = ({ commit }, { id, params, url } = {}) => {\n        commit('fetchFormStart')\n        url = run(url || options.fetchFormURL, { id }) || `/${resource}/${id ? `edit/${id}` : 'new'}/`\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchFormSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFormError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchList) {\n      actions.fetchList = (\n        { commit },\n        { filters = {}, increment, ordering = [], page = 1, limit, search, url } = {}\n      ) => {\n        const params = {\n          ...filters,\n          limit: limit || perPage,\n          offset: (page - 1) * (limit || perPage),\n          ordering: ordering.length ? ordering.join(',') : null,\n          search\n        }\n\n        commit('fetchListStart')\n        url = url || options.fetchListURL || `/${resource}/`\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchListSuccess', { response, increment, page })\n          return response\n        }).catch(error => {\n          commit('fetchListError', { error, increment })\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchSingle) {\n      actions.fetchSingle = ({ commit }, { form, id, params, url } = {}) => {\n        commit('fetchSingleStart')\n\n        url = run(url || options.fetchSingleURL, { form, id }) || (form\n          ? `/${resource}/${id ? `${id}/edit` : 'new'}/`\n          : `/${resource}/${id}/`)\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchSingleSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchSingleError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasReplace) {\n      actions.replace = ({ commit }, { id, payload, url } = {}) => {\n        commit('replaceStart')\n        url = run(url || options.replaceURL, { id }) || `/${resource}/${id}/`\n\n        return this.api.put(url, payload).then(response => {\n          commit('replaceSuccess', response)\n          return response\n        }).catch(error => {\n          commit('replaceError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasUpdate) {\n      actions.update = ({ commit }, { id, payload, url } = {}) => {\n        commit('updateStart')\n        url = run(url || options.updateURL, { id }) || `/${resource}/${id}/`\n\n        return this.api.patch(url, payload).then(response => {\n          commit('updateSuccess', response)\n          return response\n        }).catch(error => {\n          commit('updateError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    Object.assign(actions, options.actions || {})\n\n    return {\n      namespaced: true,\n\n      state: stateData,\n      getters,\n      mutations,\n      actions\n    }\n  }\n}\n"],"names":["options","apiService","Error","api","idKey","resource","call","name","parameters","run","fn","this","perPage","methods","hasCreate","includes","hasDestroy","hasFetchFilters","hasFetchForm","hasFetchList","hasFetchSingle","hasReplace","hasUpdate","stateData","filters","list","totalPages","isFetchingSingle","fetchSingleError","isDestroying","destroyError","isFetchingFilters","fetchFiltersError","isFetchingForm","fetchFormError","isFetchingList","fetchListError","isReplacing","replaceError","isUpdating","updateError","Object","assign","state","getters","byId","id","find","item","isLoading","isCreating","hasErrors","createError","mutations","createStart","createSuccess","response","data","push","error","destroyStart","destroySuccess","index","findIndex","splice","fetchFiltersStart","fetchFiltersSuccess","fields","fetchFormStart","fetchFormSuccess","fetchListStart","fetchListSuccess","payload","increment","page","results","count","Math","ceil","fetchSingleStart","fetchSingleSuccess","result","replaceStart","replaceSuccess","updateStart","updateSuccess","actions","create","commit","url","createURL","_this","post","then","Promise","reject","destroy","params","destroyURL","fetchFilters","fetchFiltersURL","get","fetchForm","fetchFormURL","fetchList","ordering","limit","search","offset","length","join","fetchListURL","fetchSingle","form","fetchSingleURL","replace","replaceURL","put","update","updateURL","patch","namespaced"],"mappings":"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"}