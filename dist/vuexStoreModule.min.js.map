{"version":3,"file":"vuexStoreModule.min.js","sources":["../src/vuexStoreModule.js"],"sourcesContent":["export default class {\n  constructor (options = {}) {\n    if (!options.apiService) {\n      throw new Error('Please provide an API service.')\n    }\n\n    // set this.api config\n    this.api = options.apiService\n    this.idKey = options.idKey\n  }\n\n  createStoreModule (resource, options = {}) {\n    if (!resource) {\n      throw new Error('Resource name must be specified.')\n    }\n\n    function call (name, ...parameters) {\n      if (typeof options[name] === 'function') {\n        options[name](parameters)\n      }\n    }\n\n    function run (fn, ...parameters) {\n      return typeof fn === 'function' ? fn(...parameters) : fn\n    }\n\n    const idKey = options.idKey || this.idKey || 'id'\n    const perPage = options.perPage || 12\n\n    const methods = options.methods || [\n      'CREATE',\n      'DESTROY',\n      'FETCH_FIELD_OPTIONS',\n      'FETCH_FILTERS',\n      'FETCH_FORM',\n      'FETCH_LIST',\n      'FETCH_SINGLE',\n      'REPLACE',\n      'UPDATE'\n    ]\n\n    const hasCreate = methods.includes('CREATE')\n    const hasDestroy = methods.includes('DESTROY')\n    const hasFetchFieldOptions = methods.includes('FETCH_FIELD_OPTIONS')\n    const hasFetchFilters = methods.includes('FETCH_FILTERS')\n    const hasFetchForm = methods.includes('FETCH_FORM')\n    const hasFetchList = methods.includes('FETCH_LIST')\n    const hasFetchSingle = methods.includes('FETCH_SINGLE')\n    const hasReplace = methods.includes('REPLACE')\n    const hasUpdate = methods.includes('UPDATE')\n\n    // States\n    const stateData = {\n      filters: {},\n      list: [],\n      totalPages: 0\n    }\n\n    if (hasCreate) {\n      stateData.isFetchingSingle = false\n      stateData.fetchSingleError = null\n    }\n\n    if (hasDestroy) {\n      stateData.isDestroying = false\n      stateData.destroyError = null\n    }\n\n    if (hasFetchFieldOptions) {\n      stateData.isFetchingFieldOptions = false\n      stateData.fetchFieldOptionsError = null\n    }\n\n    if (hasFetchFilters) {\n      stateData.isFetchingFilters = false\n      stateData.fetchFiltersError = null\n    }\n\n    if (hasFetchForm) {\n      stateData.isFetchingForm = false\n      stateData.fetchFormError = null\n    }\n\n    if (hasFetchList) {\n      stateData.isFetchingList = false\n      stateData.fetchListError = null\n    }\n\n    if (hasFetchSingle) {\n      stateData.isFetchingSingle = false\n      stateData.fetchSingleError = null\n    }\n\n    if (hasReplace) {\n      stateData.isReplacing = false\n      stateData.replaceError = null\n    }\n\n    if (hasUpdate) {\n      stateData.isUpdating = false\n      stateData.updateError = null\n    }\n\n    Object.assign(stateData, options.state || {})\n\n    // Getters\n    const getters = {\n      list: state => state.list,\n\n      filters: state => state.filters,\n\n      totalPages: state => state.totalPages,\n\n      byId: state => id => state.list.find(item => item[idKey] === id),\n\n      isLoading: state => (\n        state.isCreating ||\n        state.isDestroying ||\n        state.isFetchingFieldOptions ||\n        state.isFetchingFilters ||\n        state.isFetchingList ||\n        state.isFetchingSingle ||\n        state.isReplacing ||\n        state.isUpdating\n      ),\n\n      hasErrors: state => (\n        state.createError !== null ||\n        state.destroyError !== null ||\n        state.fetchFormError !== null ||\n        state.fetchFieldOptionsError !== null ||\n        state.fetchFiltersError !== null ||\n        state.fetchListError !== null ||\n        state.fetchSingleError !== null ||\n        state.replaceError !== null ||\n        state.updateError !== null\n      )\n    }\n\n    Object.assign(getters, options.getters || {})\n\n    // Mutations\n    const mutations = {}\n\n    if (hasCreate) {\n      mutations.createStart = state => {\n        state.isCreating = true\n        call('onCreateStart', state)\n      }\n\n      mutations.createSuccess = (state, response) => {\n        const { data } = response\n\n        if (data) {\n          state.list.push(data)\n        }\n\n        state.createError = null\n        state.isCreating = false\n        call('onCreateSuccess', state, response)\n      }\n\n      mutations.createError = (state, error) => {\n        state.createError = error\n        state.isCreating = false\n        call('onCreateError', state, error)\n      }\n    }\n\n    if (hasDestroy) {\n      mutations.destroyStart = state => {\n        state.isDestroying = true\n        call('onDestroyStart', state)\n      }\n\n      mutations.destroySuccess = (state, id) => {\n        const index = state.list.findIndex(item => item[idKey] === id)\n\n        if (~index) {\n          state.list.splice(index, 1)\n        }\n\n        state.destroyError = null\n        state.isDestroying = false\n        call('onDestroySuccess', state, id)\n      }\n\n      mutations.destroyError = (state, error) => {\n        state.destroyError = error\n        state.isDestroying = false\n        call('onDestroyError', state, error)\n      }\n    }\n\n    if (hasFetchFieldOptions) {\n      mutations.fetchFieldOptionsStart = state => {\n        state.isFetchingFieldOptions = true\n        call('onFetchFieldOptionsStart', state)\n      }\n\n      mutations.fetchFieldOptionsSuccess = (state, response) => {\n        state.fetchFieldOptionsError = null\n        state.isFetchingFieldOptions = false\n        call('onFetchFieldOptionsSuccess', state, response)\n      }\n\n      mutations.fetchFieldOptionsError = (state, error) => {\n        state.fetchFieldOptionsError = error\n        state.isFetchingFieldOptions = false\n        call('onFetchFieldOptionsError', state, error)\n      }\n    }\n\n    if (hasFetchFilters) {\n      mutations.fetchFiltersStart = state => {\n        state.isFetchingFilters = true\n        call('onFetchFiltersStart', state)\n      }\n\n      mutations.fetchFiltersSuccess = (state, response) => {\n        const { fields } = response.data\n        state.filters = fields\n\n        state.fetchFiltersError = null\n        state.isFetchingFilters = false\n        call('onFetchFiltersSuccess', state, response)\n      }\n\n      mutations.fetchFiltersError = (state, error) => {\n        state.fetchFiltersError = error\n        state.isFetchingFilters = false\n        call('onFetchFiltersError', state, error)\n      }\n    }\n\n    if (hasFetchForm) {\n      mutations.fetchFormStart = state => {\n        state.isFetchingForm = true\n        call('onFetchFormStart', state)\n      }\n\n      mutations.fetchFormSuccess = (state, response) => {\n        state.fetchFormError = null\n        state.isFetchingForm = false\n        call('onfetchFormSuccess', state, response)\n      }\n\n      mutations.fetchFormError = (state, error) => {\n        state.fetchFormError = error\n        state.isFetchingForm = false\n        call('onFetchFormError', state, error)\n      }\n    }\n\n    if (hasFetchList) {\n      mutations.fetchListStart = state => {\n        state.isFetchingList = true\n        call('onFetchListStart', state)\n      }\n\n      mutations.fetchListSuccess = (state, payload = {}) => {\n        const { response, increment, page } = payload\n        const { results, count } = response.data\n\n        increment && page > 1\n          ? state.list.push(...results)\n          : state.list = results || []\n\n        state.totalPages = Math.ceil(count / perPage)\n        state.fetchListError = null\n        state.isFetchingList = false\n        call('onfetchListSuccess', state, response)\n      }\n\n      mutations.fetchListError = (state, payload = {}) => {\n        const { error, increment } = payload\n\n        if (!increment) {\n          state.list = []\n        }\n\n        state.fetchListError = error\n        state.isFetchingList = false\n        call('onFetchListError', state, error)\n      }\n    }\n\n    if (hasFetchSingle) {\n      mutations.fetchSingleStart = state => {\n        state.isFetchingSingle = true\n        call('onFetchSingleStart', state)\n      }\n\n      mutations.fetchSingleSuccess = (state, response) => {\n        const { result } = response.data\n\n        if (result) {\n          const index = state.list.findIndex(\n            item => item[idKey] === result[idKey]\n          )\n\n          if (~index) {\n            state.list.splice(index, 1, result)\n            return\n          }\n\n          state.list.push(result)\n        }\n\n        state.fetchSingleError = null\n        state.isFetchingSingle = false\n        call('onFetchSingleSuccess', state, response)\n      }\n\n      mutations.fetchSingleError = (state, error) => {\n        state.fetchSingleError = error\n        state.isFetchingSingle = false\n        call('onFetchSingleError', state, error)\n      }\n    }\n\n    if (hasReplace) {\n      mutations.replaceStart = state => {\n        state.isReplacing = true\n        call('onReplaceStart', state)\n      }\n\n      mutations.replaceSuccess = (state, response) => {\n        const { result } = response.data\n\n        const index = state.list.findIndex(\n          item => item[idKey] === result[idKey]\n        )\n\n        if (~index) {\n          state.list.splice(index, 1, result)\n        }\n\n        state.replaceError = null\n        state.isReplacing = false\n        call('onReplaceSuccess', state, response)\n      }\n\n      mutations.replaceError = (state, error) => {\n        state.replaceError = error\n        state.isReplacing = false\n        call('onReplaceError', state, error)\n      }\n    }\n\n    if (hasUpdate) {\n      mutations.updateStart = state => {\n        state.isUpdating = true\n        call('onUpdateStart', state)\n      }\n\n      mutations.updateSuccess = (state, response) => {\n        const { result } = response.data\n\n        for (const index in state.list) {\n          const item = state.list[index]\n\n          if (item[idKey] === result[idKey]) {\n            state.list.splice(index, 1, { ...item, ...result })\n            break\n          }\n        }\n\n        state.updateError = null\n        state.isUpdating = false\n        call('onUpdateSuccess', state, response)\n      }\n\n      mutations.updateError = (state, error) => {\n        state.updateError = error\n        state.isUpdating = false\n        call('onUpdateError', state, error)\n      }\n    }\n\n    Object.assign(mutations, options.mutations || {})\n\n    // Actions\n    const actions = {}\n\n    if (hasCreate) {\n      actions.create = ({ commit }, { payload, url } = {}) => {\n        commit('createStart')\n        url = url || options.createURL || `/${resource}/`\n\n        return this.api.post(url, payload).then(response => {\n          commit('createSuccess', response)\n          return response\n        }).catch(error => {\n          commit('createError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasDestroy) {\n      actions.destroy = ({ commit }, { id, params, url } = {}) => {\n        commit('destroyStart')\n        url = run(url || options.destroyURL, { id }) || `/${resource}/${id}/`\n\n        return this.api.delete(url, { params }).then(response => {\n          commit('destroySuccess', id)\n          return response\n        }).catch(error => {\n          commit('destroyError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchFieldOptions) {\n      actions.fetchFieldOptions = ({ commit }, { field, params, url } = {}) => {\n        commit('fetchFieldOptionsStart')\n        url = url || `/${resource}/options/${field}`\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchFieldOptionsSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFieldOptionsError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchFilters) {\n      actions.fetchFilters = ({ commit }, { params, url } = {}) => {\n        commit('fetchFiltersStart')\n        url = url || options.fetchFiltersURL || `/${resource}/filters/`\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchFiltersSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFiltersError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchForm) {\n      actions.fetchForm = ({ commit }, { id, params, url } = {}) => {\n        commit('fetchFormStart')\n        url = run(url || options.fetchFormURL, { id }) || `/${resource}/${id ? `edit/${id}` : 'new'}/`\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchFormSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFormError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchList) {\n      actions.fetchList = (\n        { commit },\n        { filters = {}, increment, ordering = [], page = 1, limit, search, url } = {}\n      ) => {\n        const params = {\n          ...filters,\n          limit: limit || perPage,\n          offset: (page - 1) * (limit || perPage),\n          ordering: ordering.length ? ordering.join(',') : null,\n          search\n        }\n\n        commit('fetchListStart')\n        url = url || options.fetchListURL || `/${resource}/`\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchListSuccess', { response, increment, page })\n          return response\n        }).catch(error => {\n          commit('fetchListError', { error, increment })\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchSingle) {\n      actions.fetchSingle = ({ commit }, { form, id, params, url } = {}) => {\n        commit('fetchSingleStart')\n\n        url = run(url || options.fetchSingleURL, { form, id }) || (form\n          ? `/${resource}/${id ? `${id}/edit` : 'new'}/`\n          : `/${resource}/${id}/`)\n\n        return this.api.get(url, { params }).then(response => {\n          commit('fetchSingleSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchSingleError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasReplace) {\n      actions.replace = ({ commit }, { id, payload, url } = {}) => {\n        commit('replaceStart')\n        url = run(url || options.replaceURL, { id }) || `/${resource}/${id}/`\n\n        return this.api.put(url, payload).then(response => {\n          commit('replaceSuccess', response)\n          return response\n        }).catch(error => {\n          commit('replaceError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasUpdate) {\n      actions.update = ({ commit }, { id, payload, url } = {}) => {\n        commit('updateStart')\n        url = run(url || options.updateURL, { id }) || `/${resource}/${id}/`\n\n        return this.api.patch(url, payload).then(response => {\n          commit('updateSuccess', response)\n          return response\n        }).catch(error => {\n          commit('updateError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    Object.assign(actions, options.actions || {})\n\n    return {\n      namespaced: true,\n\n      state: stateData,\n      getters,\n      mutations,\n      actions\n    }\n  }\n}\n"],"names":["options","apiService","Error","api","idKey","resource","call","name","parameters","run","fn","this","perPage","methods","hasCreate","includes","hasDestroy","hasFetchFieldOptions","hasFetchFilters","hasFetchForm","hasFetchList","hasFetchSingle","hasReplace","hasUpdate","stateData","filters","list","totalPages","isFetchingSingle","fetchSingleError","isDestroying","destroyError","isFetchingFieldOptions","fetchFieldOptionsError","isFetchingFilters","fetchFiltersError","isFetchingForm","fetchFormError","isFetchingList","fetchListError","isReplacing","replaceError","isUpdating","updateError","Object","assign","state","getters","byId","id","find","item","isLoading","isCreating","hasErrors","createError","mutations","createStart","createSuccess","response","data","push","error","destroyStart","destroySuccess","index","findIndex","splice","fetchFieldOptionsStart","fetchFieldOptionsSuccess","fetchFiltersStart","fetchFiltersSuccess","fields","fetchFormStart","fetchFormSuccess","fetchListStart","fetchListSuccess","payload","increment","page","results","count","Math","ceil","fetchSingleStart","fetchSingleSuccess","result","replaceStart","replaceSuccess","updateStart","updateSuccess","actions","create","commit","url","createURL","_this","post","then","Promise","reject","destroy","params","destroyURL","fetchFieldOptions","field","get","fetchFilters","fetchFiltersURL","fetchForm","fetchFormURL","fetchList","ordering","limit","search","offset","length","join","fetchListURL","fetchSingle","form","fetchSingleURL","replace","replaceURL","put","update","updateURL","patch","namespaced"],"mappings":"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"}