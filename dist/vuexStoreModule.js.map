{"version":3,"sources":["vuexStoreModule.js"],"names":["options","apiService","Error","api","resource","call","name","parameters","idAttribute","perPage","methods","hasCreate","includes","hasDestroy","hasFetchFilters","hasFetchForm","hasFetchList","hasFetchSingle","hasReplace","hasUpdate","stateData","filters","list","totalPages","isFetchingSingle","fetchSingleError","isDestroying","destroyError","isFetchingFilters","fetchFiltersError","isFetchingForm","fetchFormError","isFetchingList","fetchListError","isReplacing","replaceError","isUpdating","updateError","Object","assign","state","getters","byId","id","find","item","isLoading","isCreating","hasErrors","createError","mutations","createStart","createSuccess","response","data","push","error","destroyStart","destroySuccess","index","findIndex","Vue","delete","fetchFiltersStart","fetchFiltersSuccess","fields","fetchFormStart","fetchFormSuccess","errors","fetchListStart","fetchListSuccess","payload","increment","results","count","Math","ceil","fetchSingleStart","fetchSingleSuccess","result","set","replaceStart","replaceSuccess","updateStart","updateSuccess","actions","create","commit","url","post","then","catch","Promise","reject","destroy","params","fetchFilters","fetchFiltersURL","get","fetchForm","fetchList","ordering","page","limit","search","offset","length","join","replaceURL","fetchSingle","form","fetchSingleURL","replace","put","update","patch","namespaced"],"mappings":"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","file":"vuexStoreModule.js","sourceRoot":"../src","sourcesContent":["// import Vue from 'vue'\n\nexport default class {\n  constructor (options = {}) {\n    if (!options.apiService) {\n      throw new Error('Please provide an API service.')\n    }\n\n    // set api config\n    this.api = options.apiService\n  }\n\n  createStoreModule (resource, options = {}) {\n    if (!resource) {\n      throw new Error('Resource name must be specified.')\n    }\n\n    function call (name, ...parameters) {\n      if (typeof options[name] === 'function') {\n        options[name](parameters)\n      }\n    }\n\n    const idAttribute = options.idAttribute || 'id'\n    const perPage = options.perPage || 12\n\n    const methods = options.methods || [\n      'CREATE',\n      'DESTROY',\n      'FETCH_FILTERS',\n      'FETCH_FORM',\n      'FETCH_LIST',\n      'FETCH_SINGLE',\n      'REPLACE',\n      'UPDATE'\n    ]\n\n    const hasCreate = methods.includes('CREATE')\n    const hasDestroy = methods.includes('DESTROY')\n    const hasFetchFilters = methods.includes('FETCH_FILTERS')\n    const hasFetchForm = methods.includes('FETCH_FORM')\n    const hasFetchList = methods.includes('FETCH_LIST')\n    const hasFetchSingle = methods.includes('FETCH_SINGLE')\n    const hasReplace = methods.includes('REPLACE')\n    const hasUpdate = methods.includes('UPDATE')\n\n    // States\n    const stateData = {\n      filters: {},\n      list: [],\n      totalPages: 0\n    }\n\n    if (hasCreate) {\n      stateData.isFetchingSingle = false\n      stateData.fetchSingleError = null\n    }\n\n    if (hasDestroy) {\n      stateData.isDestroying = false\n      stateData.destroyError = null\n    }\n\n    if (hasFetchFilters) {\n      stateData.isFetchingFilters = false\n      stateData.fetchFiltersError = null\n    }\n\n    if (hasFetchForm) {\n      stateData.isFetchingForm = false\n      stateData.fetchFormError = null\n    }\n\n    if (hasFetchList) {\n      stateData.isFetchingList = false\n      stateData.fetchListError = null\n    }\n\n    if (hasFetchSingle) {\n      stateData.isFetchingSingle = false\n      stateData.fetchSingleError = null\n    }\n\n    if (hasReplace) {\n      stateData.isReplacing = false\n      stateData.replaceError = null\n    }\n\n    if (hasUpdate) {\n      stateData.isUpdating = false\n      stateData.updateError = null\n    }\n\n    Object.assign(stateData, options.state || {})\n\n    // Getters\n    const getters = {\n      list: state => state.list,\n\n      filters: state => state.filters,\n\n      totalPages: state => state.totalPages,\n  \n      byId: state => id => state.list.find(item => item[idAttribute] === id),\n\n      isLoading: state => (\n        state.isCreating ||\n        state.isDestroying ||\n        state.isFetchingFilters ||\n        state.isFetchingList ||\n        state.isFetchingSingle ||\n        state.isReplacing ||\n        state.isUpdating\n      ),\n\n      hasErrors: state => (\n        state.createError !== null ||\n        state.destroyError !== null ||\n        state.fetchFormError !== null ||\n        state.fetchFiltersError !== null ||\n        state.fetchListError !== null ||\n        state.fetchSingleError !== null ||\n        state.replaceError !== null ||\n        state.updateError !== null\n      )\n    }\n\n    Object.assign(getters, options.getters || {})\n\n    // Mutations\n    const mutations = {}\n\n    if (hasCreate) {\n      mutations.createStart = state => {\n        state.isCreating = true\n        call('onCreateStart', state)\n      }\n\n      mutations.createSuccess = (state, response) => {\n        const { data } = response\n\n        if (data) {\n          state.list.push(data)\n        }\n\n        state.createError = null\n        state.isCreating = false\n        call('onCreateSuccess', state, response)\n      }\n\n      mutations.createError = (state, error) => {\n        state.createError = error\n        state.isCreating = false\n        call('onCreateError', state, error)\n      }\n    }\n\n    if (hasDestroy) {\n      mutations.destroyStart = state => {\n        state.isDestroying = true\n        call('onDestroyStart', state)\n      }\n  \n      mutations.destroySuccess = (state, id) => {\n        const index = state.list.findIndex(item => item[idAttribute] === id)\n\n        if (~index) {\n          Vue.delete(state.list, index)\n        }\n\n        state.destroyError = null\n        state.isDestroying = false\n        call('onDestroySuccess', state, id)\n      }\n\n      mutations.destroyError = (state, error) => {\n        state.destroyError = error\n        state.isDestroying = false\n        call('onDestroyError', state, error)\n      }\n    }\n\n    if (hasFetchFilters) {\n      mutations.fetchFiltersStart = state => {\n        state.isFetchingFilters = true\n        call('onFetchFiltersStart', state)\n      }\n\n      mutations.fetchFiltersSuccess = (state, response) => {\n        const { fields } = response.data\n        state.filters = fields\n\n        state.fetchFiltersError = null\n        state.isFetchingFilters = false\n        call('onfetchFiltersSuccess', state, response)\n      }\n\n      mutations.fetchFiltersError = (state, error) => {\n        state.fetchFiltersError = error\n        state.isFetchingFilters = false\n        call('onFetchFiltersError', state, error)\n      }\n    }\n\n    if (hasFetchForm) {\n      mutations.fetchFormStart = state => {\n        state.isFetchingForm = true\n        call('onFetchFormStart', state)\n      }\n  \n      mutations.fetchFormSuccess = (state, { errors, fields }) => {\n        state.fetchFormError = null\n        state.isFetchingForm = false\n        call('onfetchFormSuccess', state, response)\n      }\n\n      mutations.fetchFormError = (state, error) => {\n        state.fetchFormError = error\n        state.isFetchingForm = false\n        call('onFetchFormError', state, error)\n      }\n    }\n\n    if (hasFetchList) {\n      mutations.fetchListStart = state => {\n        state.isFetchingList = true\n        call('onFetchListStart', state)\n      }\n\n      mutations.fetchListSuccess = (state, payload = {}) => {\n        const { response, increment } = payload\n        const { results, count } = response.data\n\n        increment\n          ? state.list.push(...results)\n          : state.list = results || []\n  \n        state.totalPages = Math.ceil(count / perPage)\n        state.fetchListError = null\n        state.isFetchingList = false\n        call('onfetchListSuccess', state, response)\n      }\n\n      mutations.fetchListError = (state, payload = {}) => {\n        const { error, increment } = payload\n\n        if (!increment) {\n          state.list = []\n        }\n\n        state.fetchListError = error\n        state.isFetchingList = false\n        call('onFetchListError', state, error)\n      }\n    }\n\n    if (hasFetchSingle) {\n      mutations.fetchSingleStart = state => {\n        state.isFetchingSingle = true\n        call('onFetchSingleStart', state)\n      }\n\n      mutations.fetchSingleSuccess = (state, response) => {\n        const { result } = response.data\n\n        if (result) {\n          const index = state.list.findIndex(\n            item => item[idAttribute] === result[idAttribute]\n          )\n\n          ~index ? Vue.set(state.list, index, result) : state.list.push(result)\n        }\n\n        state.fetchSingleError = null\n        state.isFetchingSingle = false\n        call('onFetchSingleSuccess', state, response)\n      }\n\n      mutations.fetchSingleError = (state, error) => {\n        state.fetchSingleError = error\n        state.isFetchingSingle = false\n        call('onFetchSingleError', state, error)\n      }\n    }\n\n    if (hasReplace) {\n      mutations.replaceStart = state => {\n        state.isReplacing = true\n        call('onReplaceStart', state)\n      }\n\n      mutations.replaceSuccess = (state, response) => {\n        const { data } = response\n\n        const index = state.list.findIndex(\n          item => item[idAttribute] === data[idAttribute]\n        )\n\n        if (~index) {\n          Vue.set(state.list, index, data)\n        }\n\n        state.replaceError = null\n        state.isReplacing = false\n        call('onReplaceSuccess', state, response)\n      }\n\n      mutations.replaceError = (state, error) => {\n        state.replaceError = error\n        state.isReplacing = false\n        call('onReplaceError', state, error)\n      }\n    }\n\n    if (hasUpdate) {\n      mutations.updateStart = state => {\n        state.isUpdating = true\n        call('onUpdateStart', state)\n      }\n\n      mutations.updateSuccess = (state, response) => {\n        const { data } = response\n\n        for (const index in state.list) {\n          const item = state.list[index]\n\n          if (item[idAttribute] === data[idAttribute]) {\n            Vue.set(state.list, index, { ...item, ...data })\n            break\n          }\n        }\n\n        state.updateError = null\n        state.isUpdating = false\n        call('onUpdateSuccess', state, response)\n      }\n  \n      mutations.updateError = (state, error) => {\n        state.updateError = error\n        state.isUpdating = false\n        call('onUpdateError', state, error)\n      }\n    }\n  \n    Object.assign(mutations, options.mutations || {})\n\n    // Actions\n    const actions = {}\n\n    if (hasCreate) {\n      actions.create = ({ commit }, { payload, url } = {}) => {\n        commit('createStart')\n        url = url || `/${resource}/`\n  \n        return api.post(url, payload).then(response => {\n          commit('createSuccess', response)\n          return response\n        }).catch(error => {\n          commit('createError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasDestroy) {\n      actions.destroy = ({ commit }, { id, params } = {}) => {\n        commit('destroyStart')\n\n        return api.delete(`/${resource}/${id}/`, { params }).then(response => {\n          commit('destroySuccess', id)\n          return response\n        }).catch(error => {\n          commit('destroyError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchFilters) {\n      actions.fetchFilters = ({ commit }, { params, url } = {}) => {\n        commit('fetchFiltersStart')\n        url = url || options.fetchFiltersURL || `/${resource}/filters/`\n  \n        return api.get(url, { params }).then(response => {\n          commit('fetchFiltersSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFiltersError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchForm) {\n      actions.fetchForm = ({ commit }, { id, params, url } = {}) => {\n        commit('fetchFormStart')\n        url = url || `/${resource}/${id ? `edit/${id}` : 'new'}/`\n\n        return api.get(url, { params }).then(response => {\n          commit('fetchFormSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchFormError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchList) {\n      actions.fetchList = (\n        { commit },\n        { filters = {}, increment, ordering = [], page = 1, limit, search, url } = {}\n      ) => {\n        const params = {\n          ...filters,\n          limit: limit || perPage,\n          offset: (page - 1) * (limit || perPage),\n          ordering: ordering.length ? ordering.join(',') : null,\n          search\n        }\n\n        commit('fetchListStart')\n        url = url || options.replaceURL || `/${resource}/`\n\n        return api.get(url, { params }).then(response => {\n          commit('fetchListSuccess', { response, increment })\n          return response\n        }).catch(error => {\n          commit('fetchListError', { error, increment })\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasFetchSingle) {\n      actions.fetchSingle = ({ commit }, { form, id, params, url } = {}) => {\n        commit('fetchSingleStart')\n\n        url = url || (form\n          ? `/${resource}/${id ? `${id}/edit` : 'new'}/`\n          : options.fetchSingleURL || `/${resource}/${id}/`)\n\n        return api.get(url, { params }).then(response => {\n          commit('fetchSingleSuccess', response)\n          return response\n        }).catch(error => {\n          commit('fetchSingleError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasReplace) {\n      actions.replace = ({ commit }, { id, payload, url } = {}) => {\n        commit('replaceStart')\n        url = url || options.replaceURL || `/${resource}/${id}/`\n\n        return api.put(url, payload).then(response => {\n          commit('replaceSuccess', response)\n          return response\n        }).catch(error => {\n          commit('replaceError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    if (hasUpdate) {\n      actions.update = ({ commit }, { id, payload } = {}) => {\n        commit('updateStart')\n\n        return api.patch(`/${resource}/${id}`, payload).then(response => {\n          commit('updateSuccess', response)\n          return response\n        }).catch(error => {\n          commit('updateError', error)\n          return Promise.reject(error)\n        })\n      }\n    }\n\n    Object.assign(actions, options.actions || {})\n\n    return {\n      namespaced: true,\n\n      state: stateData,\n      getters,\n      mutations,\n      actions\n    }\n  }\n}\n"]}